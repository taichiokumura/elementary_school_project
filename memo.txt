# # Pillowを使用して画像を読み込む
    # img = Image.open(image_path)
    
    # # 画像を白黒に変換SS
    # gray_img = img.convert('L')

    # # 白黒画像を保存
    # bw_image_path = os.path.join(settings.MEDIA_ROOT, 'result_images', 'bw_image.jpg')
    # gray_img.save(bw_image_path)
    
    # bw_url = os.path.join(settings.MEDIA_URL, 'result_images', 'bw_image.jpg')


def preview(request, image_id=0):
    upload_image = get_object_or_404(Document, id=image_id)
    print(f"Debug: upload_image - {upload_image}")

    # 画像のパスを取得
    image_path = upload_image.photo.path
    print(f"Debug: Image Path - {image_path}")

    # 使用する画像処理ライブラリをPillowからOpenCVに変更
    img = cv2.imread(image_path)

    # 画像をグレースケールに変換
    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    #新しいファイル名を作成
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    new_filename = f"cutout_image_{timestamp}.jpg"

    # OpenCVでグレースケール画像を保存,新しいファイル名で保存
    cutout_image_path = os.path.join(settings.MEDIA_ROOT, 'result_images', new_filename)
    cv2.imwrite(cutout_image_path, gray_img)
    
    cutout_url = os.path.join(settings.MEDIA_URL, 'result_images', new_filename)

    upload_image.cutout_image(cutout_url)

    params = {
        'title': '画像の表示',
        'upload_form': DocumentForm(),
        'id': upload_image.id,
        'url': upload_image.photo.url,
        'cutout_url': cutout_url  # 白黒画像のURLを追加
    }

    return render(request, 'webtestapp/index.html', params)